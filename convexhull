import math

def orientation(p, q, r):
    """
    Find orientation of ordered triplet (p, q, r).
    Returns:
        0: Collinear
        1: Clockwise
        2: Counterclockwise
    """
    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])
    if val == 0:
        return 0  # Collinear
    return 1 if val > 0 else 2  # Clockwise or Counterclockwise

def convex_hull(points):
    # Step 1: Find the bottommost point
    min_idx = 0
    n = len(points)
    for i in range(1, n):
        if points[i][1] < points[min_idx][1] or (points[i][1] == points[min_idx][1] and points[i][0] < points[min_idx][0]):
            min_idx = i

    # Step 2: Sort points based on polar angle with the bottommost point
    sorted_points = sorted(points, key=lambda x: (math.atan2(x[1] - points[min_idx][1], x[0] - points[min_idx][0]), x[0], x[1]))

    # Step 3: Initialize an empty stack and push the first three points to it
    hull = [sorted_points[0], sorted_points[1]]
    for i in range(2, n):
        while len(hull) > 1 and orientation(hull[-2], hull[-1], sorted_points[i]) != 2:
            hull.pop()
        hull.append(sorted_points[i])

    return hull

# Example usage:
points = [(0, 3), (1, 1), (2, 2), (4, 4), (0, 0), (1, 2), (3, 1), (3, 3)]
print(convex_hull(points))

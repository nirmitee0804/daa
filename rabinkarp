def rabin_karp(text, pattern):
    """
    Implementation of the Rabin-Karp algorithm for string matching.

    Args:
    - text (str): The text in which to search for the pattern.
    - pattern (str): The pattern to search for in the text.

    Returns:
    - list: A list of indices where the pattern is found within the text.
    """
    indices = []
    n = len(text)
    m = len(pattern)
    d = 256  # Number of characters in the input alphabet
    q = 101  # A prime number for hashing
    
    # Calculate hash value for pattern and the first window of text
    p = 0  # Hash value for pattern
    t = 0  # Hash value for current window of text
    h = 1
    for i in range(m-1):
        h = (h * d) % q
    for i in range(m):
        p = (d * p + ord(pattern[i])) % q
        t = (d * t + ord(text[i])) % q

    # Slide the pattern over text one by one
    for i in range(n - m + 1):
        # Check if the hash values of current window of text and pattern match
        if p == t:
            # Check if all characters match
            match = True
            for j in range(m):
                if text[i + j] != pattern[j]:
                    match = False
                    break
            if match:
                indices.append(i)

        # Calculate hash value for next window of text: Remove leading digit, add trailing digit
        if i < n - m:
            t = (d * (t - ord(text[i]) * h) + ord(text[i + m])) % q
            # Make sure hash value is non-negative
            if t < 0:
                t = t + q
    return indices

# Example usage:
text = input("Enter the text: ")
pattern = input("Enter the pattern to search for: ")
result = rabin_karp(text, pattern)
if result:
    print("Pattern found at indices:", result)
else:
    print("Pattern not found in the text.")
